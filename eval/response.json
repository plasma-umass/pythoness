{
    "question_id": "3792",
    "question_frontend_id": "3451",
    "bound_topic_id": null,
    "title": "Find Invalid IP Addresses",
    "title_slug": null,
    "category_title": null,
    "frequency": null,
    "freq_bar": null,
    "content": "<p>Table: <code> logs</code></p>\n\n<pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| log_id      | int     |\n| ip          | varchar |\n| status_code | int     |\n+-------------+---------+\nlog_id is the unique key for this table.\nEach row contains server access log information including IP address and HTTP status code.\n</pre>\n\n<p>Write a solution to find <strong>invalid IP addresses</strong>. An IPv4 address is invalid if it meets any of these conditions:</p>\n\n<ul>\n\t<li>Contains numbers <strong>greater than</strong> <code>255</code> in any octet</li>\n\t<li>Has <strong>leading zeros</strong> in any octet (like <code>01.02.03.04</code>)</li>\n\t<li>Has <strong>less or more</strong> than <code>4</code> octets</li>\n</ul>\n\n<p>Return <em>the result table </em><em>ordered by</em> <code>invalid_count</code>,&nbsp;<code>ip</code>&nbsp;<em>in <strong>descending</strong> order respectively</em>.&nbsp;</p>\n\n<p>The result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong></p>\n\n<p>logs table:</p>\n\n<pre class=\"example-io\">\n+--------+---------------+-------------+\n| log_id | ip            | status_code | \n+--------+---------------+-------------+\n| 1      | 192.168.1.1   | 200         | \n| 2      | 256.1.2.3     | 404         | \n| 3      | 192.168.001.1 | 200         | \n| 4      | 192.168.1.1   | 200         | \n| 5      | 192.168.1     | 500         | \n| 6      | 256.1.2.3     | 404         | \n| 7      | 192.168.001.1 | 200         | \n+--------+---------------+-------------+\n</pre>\n\n<p><strong>Output:</strong></p>\n\n<pre class=\"example-io\">\n+---------------+--------------+\n| ip            | invalid_count|\n+---------------+--------------+\n| 256.1.2.3     | 2            |\n| 192.168.001.1 | 2            |\n| 192.168.1     | 1            |\n+---------------+--------------+\n</pre>\n\n<p><strong>Explanation:</strong></p>\n\n<ul>\n\t<li>256.1.2.3&nbsp;is invalid because 256 &gt; 255</li>\n\t<li>192.168.001.1&nbsp;is invalid because of leading zeros</li>\n\t<li>192.168.1&nbsp;is invalid because it has only 3 octets</li>\n</ul>\n\n<p>The output table is ordered by invalid_count, ip in descending order respectively.</p>\n</div>\n",
    "translated_title": null,
    "translated_content": null,
    "is_paid_only": false,
    "difficulty": "Hard",
    "likes": 8,
    "dislikes": 4,
    "is_liked": null,
    "is_favor": null,
    "similar_questions": "[]",
    "contributors": [],
    "lang_to_valid_playground": "{\"cpp\": false, \"java\": false, \"python\": false, \"python3\": false, \"mysql\": false, \"mssql\": false, \"oraclesql\": false, \"c\": false, \"csharp\": false, \"javascript\": false, \"typescript\": false, \"bash\": false, \"php\": false, \"swift\": false, \"kotlin\": false, \"dart\": false, \"golang\": false, \"ruby\": false, \"scala\": false, \"html\": false, \"pythonml\": false, \"rust\": false, \"racket\": false, \"erlang\": false, \"elixir\": false, \"pythondata\": false, \"react\": false, \"vanillajs\": false, \"postgresql\": false, \"cangjie\": false}",
    "topic_tags": [
        {
            "name": "Database",
            "slug": "database",
            "translated_name": null,
            "typename": "TopicTagNode"
        }
    ],
    "company_tag_stats": null,
    "code_snippets": [
        {
            "lang": "MySQL",
            "lang_slug": "mysql",
            "code": "# Write your MySQL query statement below\n",
            "typename": "CodeSnippetNode"
        },
        {
            "lang": "MS SQL Server",
            "lang_slug": "mssql",
            "code": "/* Write your T-SQL query statement below */\n",
            "typename": "CodeSnippetNode"
        },
        {
            "lang": "Oracle",
            "lang_slug": "oraclesql",
            "code": "/* Write your PL/SQL query statement below */\n",
            "typename": "CodeSnippetNode"
        },
        {
            "lang": "Pandas",
            "lang_slug": "pythondata",
            "code": "import pandas as pd\n\ndef find_invalid_ips(logs: pd.DataFrame) -> pd.DataFrame:\n    ",
            "typename": "CodeSnippetNode"
        },
        {
            "lang": "PostgreSQL",
            "lang_slug": "postgresql",
            "code": "-- Write your PostgreSQL query statement below\n",
            "typename": "CodeSnippetNode"
        }
    ],
    "stats": "{\"totalAccepted\": \"1.3K\", \"totalSubmission\": \"2.1K\", \"totalAcceptedRaw\": 1340, \"totalSubmissionRaw\": 2104, \"acRate\": \"63.7%\"}",
    "ac_rate": null,
    "hints": [],
    "solution": null,
    "has_solution": null,
    "has_video_solution": null,
    "status": null,
    "sample_test_case": "{\"headers\":{\"logs\":[\"log_id\",\"ip\",\"status_code\"]},\"rows\":{\"logs\":[[1,\"192.168.1.1\",200],[2,\"256.1.2.3\",404],[3,\"192.168.001.1\",200],[4,\"192.168.1.1\",200],[5,\"192.168.1\",500],[6,\"256.1.2.3\",404],[7,\"192.168.001.1\",200]]}}",
    "judger_available": true,
    "judge_type": "large",
    "mysql_schemas": [
        "CREATE TABLE logs (\n    log_id INT,\n    ip VARCHAR(255),\n    status_code INT\n)\n",
        "Truncate table logs",
        "insert into logs (log_id, ip, status_code) values ('1', '192.168.1.1', '200')",
        "insert into logs (log_id, ip, status_code) values ('2', '256.1.2.3', '404')",
        "insert into logs (log_id, ip, status_code) values ('3', '192.168.001.1', '200')",
        "insert into logs (log_id, ip, status_code) values ('4', '192.168.1.1', '200')",
        "insert into logs (log_id, ip, status_code) values ('5', '192.168.1', '500')",
        "insert into logs (log_id, ip, status_code) values ('6', '256.1.2.3', '404')",
        "insert into logs (log_id, ip, status_code) values ('7', '192.168.001.1', '200')"
    ],
    "enable_run_code": true,
    "enable_test_mode": false,
    "env_info": "{\"mysql\": [\"MySQL\", \"<p><code>MySQL 8.0</code>.</p>\"], \"mssql\": [\"MS SQL Server\", \"<p><code>mssql server 2019</code>.</p>\"], \"oraclesql\": [\"Oracle\", \"<p><code>Oracle Sql 11.2</code>.</p>\"], \"pythondata\": [\"Pandas\", \"<p>Python 3.10 with Pandas 2.2.2 and NumPy 1.26.4</p>\"], \"postgresql\": [\"PostgreSQL\", \"<p>PostgreSQL 16</p>\"]}",
    "meta_data": "{\"mysql\": [\"CREATE TABLE logs (\\n    log_id INT,\\n    ip VARCHAR(255),\\n    status_code INT\\n)\\n\"], \"mssql\": [\"CREATE TABLE logs (\\n    log_id INT,\\n    ip VARCHAR(255),\\n    status_code INT\\n)\\n\"], \"oraclesql\": [\"CREATE TABLE logs (\\n    log_id NUMBER,\\n    ip VARCHAR2(255),\\n    status_code NUMBER\\n)\\n\"], \"database\": true, \"name\": \"find_invalid_ips\", \"postgresql\": [\"CREATE TABLE logs (\\n    log_id INTEGER,\\n    ip VARCHAR(255),           \\n    status_code INTEGER        \\n);\"], \"pythondata\": [\"logs = pd.DataFrame(columns=[\\\"log_id\\\", \\\"ip\\\", \\\"status_code\\\"]).astype({\\\"log_id\\\": \\\"Int64\\\", \\\"ip\\\": \\\"string\\\", \\\"status_code\\\": \\\"Int64\\\"})\\n\"], \"database_schema\": {\"logs\": {\"log_id\": \"INT\", \"ip\": \"VARCHAR(255)\", \"status_code\": \"INT\"}}}",
    "code_definition": "[{\"value\": \"mysql\", \"text\": \"MySQL\", \"defaultCode\": \"# Write your MySQL query statement below\\n\"}, {\"value\": \"mssql\", \"text\": \"MS SQL Server\", \"defaultCode\": \"/* Write your T-SQL query statement below */\\n\"}, {\"value\": \"oraclesql\", \"text\": \"Oracle\", \"defaultCode\": \"/* Write your PL/SQL query statement below */\\n\"}, {\"value\": \"pythondata\", \"text\": \"Pandas\", \"defaultCode\": \"import pandas as pd\\n\\ndef find_invalid_ips(logs: pd.DataFrame) -> pd.DataFrame:\\n    \"}, {\"value\": \"postgresql\", \"text\": \"PostgreSQL\", \"defaultCode\": \"-- Write your PostgreSQL query statement below\\n\"}]"
}