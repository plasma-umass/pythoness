class Solution:
    from typing import List
    
    def maxKDivisibleComponents(self, n: int, edges: List[List[int]], values: List[int], k: int) -> int:
        
        from collections import defaultdict
        # Build adjacency list
        adj_list = defaultdict(list)
        for (u, v) in edges:
            adj_list[u].append(v)
            adj_list[v].append(u)
    
        def dfs(node, parent):
            component_sum = values[node]
            for neighbor in adj_list[node]:
                if neighbor == parent:
                    continue
                component_sum += dfs(neighbor, node)
            # If component_sum is divisible by k, we can make it a new component
            if component_sum % k == 0:
                nonlocal max_components
                max_components += 1
                return 0  # Return 0 to 'cut off' this component and not carry its sum upward
            return component_sum  # Otherwise return its sum upward to its parent
        max_components = 0
        # Start DFS from an arbitrary root node (e.g., node 0)
        dfs(0, -1)
        return max_components