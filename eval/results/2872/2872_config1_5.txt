class Solution:
    
    def maxKDivisibleComponents(self, n: int, edges: List[List[int]], values: List[int], k: int) -> int:
        
        from collections import defaultdict
        # Create adjacency list for the tree
        tree = defaultdict(list)
        for (u, v) in edges:
            tree[u].append(v)
            tree[v].append(u)
        # This will hold the count of maximum k-divisible components
        max_components = 0
        # Function to recursively perform DFS from a node
    
        def dfs(node, parent):
            nonlocal max_components
            current_sum = values[node]
            for neighbour in tree[node]:
                if neighbour != parent:
                    child_sum = dfs(neighbour, node)
                    current_sum += child_sum
            if current_sum % k == 0:
                max_components += 1
                return 0
            return current_sum
        # Start DFS from node 0 (or any arbitrary node, since it's a connected tree)
        dfs(0, -1)
        return max_components