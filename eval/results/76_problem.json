{
    "name": "Minimum Window Substring",
    "id": "76",
    "frontend_id": "76",
    "template_code_snippet": "class Solution:\n    def minWindow(self, s: str, t: str) -> str:\n        ",
    "template_code_definition": "class Solution:\n    def minWindow(self, s: str, t: str) -> str:\n        ",
    "problem_statement": "Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string \"\".\nThe testcases will be generated such that the answer is unique.\n\u00a0\nExample 1:\n\nInput: s = \"ADOBECODEBANC\", t = \"ABC\"\nOutput: \"BANC\"\nExplanation: The minimum window substring \"BANC\" includes 'A', 'B', and 'C' from string t.\n\nExample 2:\n\nInput: s = \"a\", t = \"a\"\nOutput: \"a\"\nExplanation: The entire string s is the minimum window.\n\nExample 3:\n\nInput: s = \"a\", t = \"aa\"\nOutput: \"\"\nExplanation: Both 'a's from t must be included in the window.\nSince the largest window of s only has one 'a', return empty string.\n\n\u00a0\nConstraints:\n\nm == s.length\nn == t.length\n1 <= m, n <= 10^5\ns and t consist of uppercase and lowercase English letters.\n\n\u00a0\nFollow up: Could you find an algorithm that runs in O(m + n) time?\n",
    "difficulty": "Hard",
    "premium": false,
    "enable_run_code": true,
    "enable_test_mode": false,
    "judge_type": "large",
    "judger_available": true,
    "sample_test_case": "\"ADOBECODEBANC\"\n\"ABC\""
}