class Solution:
    
    def getMaxRepetitions(self, s1: str, n1: int, s2: str, n2: int) -> int:
        
        if n1 == 0:
            return 0
        count1 = 0  # count of complete s1 cycles
        count2 = 0  # count of complete s2 cycles
        index2 = 0  # current index in s2
        mapping = {}  # to store previously seen states
        while count1 < n1:
            count1 += 1
            for char in s1:
                if char == s2[index2]:
                    index2 += 1
                    if index2 == len(s2):
                        index2 = 0
                        count2 += 1
            # Check for repetition
            if index2 in mapping:
                (previous_count1, previous_count2) = mapping[index2]
                cycle_length = count1 - previous_count1
                cycle_count2 = count2 - previous_count2
                remaining_cycles = (n1 - count1) // cycle_length
                count1 += remaining_cycles * cycle_length
                count2 += remaining_cycles * cycle_count2
            else:
                mapping[index2] = (count1, count2)
        return count2 // n2