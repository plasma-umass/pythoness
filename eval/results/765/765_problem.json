{
    "name": "Couples Holding Hands",
    "id": "770",
    "frontend_id": "765",
    "template_code_snippet": "class Solution:\n    def minSwapsCouples(self, row: List[int]) -> int:\n        ",
    "template_code_definition": "class Solution:\n    def minSwapsCouples(self, row: List[int]) -> int:\n        ",
    "problem_statement": "There are n couples sitting in 2n seats arranged in a row and want to hold hands.\nThe people and seats are represented by an integer array row where row[i] is the ID of the person sitting in the i^th seat. The couples are numbered in order, the first couple being (0, 1), the second couple being (2, 3), and so on with the last couple being (2n - 2, 2n - 1).\nReturn the minimum number of swaps so that every couple is sitting side by side. A swap consists of choosing any two people, then they stand up and switch seats.\n \nExample 1:\n\nInput: row = [0,2,1,3]\nOutput: 1\nExplanation: We only need to swap the second (row[1]) and third (row[2]) person.\n\nExample 2:\n\nInput: row = [3,2,0,1]\nOutput: 0\nExplanation: All couples are already seated side by side.\n\n \nConstraints:\n\n2n == row.length\n2 <= n <= 30\nn is even.\n0 <= row[i] < 2n\nAll the elements of row are unique.\n\n",
    "difficulty": "Hard",
    "premium": false,
    "sample_test_case": "[0,2,1,3]"
}