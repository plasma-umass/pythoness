{
    "name": "Best Time to Buy and Sell Stock III",
    "id": "123",
    "frontend_id": "123",
    "template_code_snippet": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        ",
    "template_code_definition": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        ",
    "problem_statement": "You are given an array prices where prices[i] is the price of a given stock on the i^th day.\nFind the maximum profit you can achieve. You may complete at most two transactions.\nNote: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n\u00a0\nExample 1:\n\nInput: prices = [3,3,5,0,0,3,1,4]\nOutput: 6\nExplanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\nThen buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.\nExample 2:\n\nInput: prices = [1,2,3,4,5]\nOutput: 4\nExplanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\nNote that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.\n\nExample 3:\n\nInput: prices = [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transaction is done, i.e. max profit = 0.\n\n\u00a0\nConstraints:\n\n1 <= prices.length <= 10^5\n0 <= prices[i] <= 10^5\n\n",
    "difficulty": "Hard",
    "premium": false,
    "enable_run_code": true,
    "enable_test_mode": false,
    "judge_type": "large",
    "judger_available": true,
    "sample_test_case": "[3,3,5,0,0,3,1,4]"
}