{
    "name": "Regular Expression Matching",
    "id": "10",
    "frontend_id": "10",
    "template_code_snippet": "class Solution:\n    def isMatch(self, s: str, p: str) -> bool:\n        ",
    "template_code_definition": "class Solution:\n    def isMatch(self, s: str, p: str) -> bool:\n        ",
    "problem_statement": "Given an input string s\u00a0and a pattern p, implement regular expression matching with support for '.' and '*' where:\n\n'.' Matches any single character.\u200b\u200b\u200b\u200b\n'*' Matches zero or more of the preceding element.\n\nThe matching should cover the entire input string (not partial).\n\u00a0\nExample 1:\n\nInput: s = \"aa\", p = \"a\"\nOutput: false\nExplanation: \"a\" does not match the entire string \"aa\".\n\nExample 2:\n\nInput: s = \"aa\", p = \"a*\"\nOutput: true\nExplanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes \"aa\".\n\nExample 3:\n\nInput: s = \"ab\", p = \".*\"\nOutput: true\nExplanation: \".*\" means \"zero or more (*) of any character (.)\".\n\n\u00a0\nConstraints:\n\n1 <= s.length\u00a0<= 20\n1 <= p.length\u00a0<= 20\ns contains only lowercase English letters.\np contains only lowercase English letters, '.', and\u00a0'*'.\nIt is guaranteed for each appearance of the character '*', there will be a previous valid character to match.\n\n",
    "difficulty": "Hard",
    "premium": false,
    "enable_run_code": true,
    "enable_test_mode": false,
    "judge_type": "large",
    "judger_available": true,
    "sample_test_case": "\"aa\"\n\"a\""
}