class Solution:
    import heapq
    from typing import List
    
    def maxScore(self, points: List[int], m: int) -> int:
        
        n = len(points)
        left_moves = right_moves = m
        max_min = 0
        # Priority queue to track the smallest values at each position
        pq = [0] * n
        for i in range(n):
            if i <= left_moves:
                pq[i] = points[i]
            else:
                pq[i] = points[i] + min(pq[i - 1], pq[i - left_moves - 1])
        # Initially, try using right_moves
        max_min = max(max_min, min(pq))  # pq is counting as deque from right
        # Overall loop from right
        for j in range(n - 1, -1, -1):
            if j < n - right_moves - 1:
                break
            right_index = max(0, j - right_moves)
            pq[j] = points[j]
            if j < n - 1:
                pq[j] += min(pq[j + 1], pq[j])
        max_min = max(max_min, min(pq))
        return max_min