{
    "name": "Maximum Difference Between Even and Odd Frequency II",
    "id": "3761",
    "frontend_id": "3445",
    "template_code_snippet": "class Solution:\n    def maxDifference(self, s: str, k: int) -> int:\n        ",
    "template_code_definition": "class Solution:\n    def maxDifference(self, s: str, k: int) -> int:\n        ",
    "problem_statement": "You are given a string s and an integer k. Your task is to find the maximum difference between the frequency of two characters, freq[a] - freq[b], in a substring subs of s, such that:\n\nsubs has a size of at least k.\nCharacter a has an odd frequency in subs.\nCharacter b has an even frequency in subs.\n\nReturn the maximum difference.\nNote that subs can contain more than 2 distinct characters.\n \nExample 1:\n\nInput: s = \"12233\", k = 4\nOutput: -1\nExplanation:\nFor the substring \"12233\", the frequency of '1' is 1 and the frequency of '3' is 2. The difference is 1 - 2 = -1.\n\nExample 2:\n\nInput: s = \"1122211\", k = 3\nOutput: 1\nExplanation:\nFor the substring \"11222\", the frequency of '2' is 3 and the frequency of '1' is 2. The difference is 3 - 2 = 1.\n\nExample 3:\n\nInput: s = \"110\", k = 3\nOutput: -1\n\n \nConstraints:\n\n3 <= s.length <= 3 * 10^4\ns consists only of digits '0' to '4'.\nThe input is generated that at least one substring has a character with an even frequency and a character with an odd frequency.\n1 <= k <= s.length\n\n",
    "difficulty": "Hard",
    "premium": false,
    "sample_test_case": "\"12233\"\n4"
}