{
    "name": "Longest Common Subpath",
    "id": "2051",
    "frontend_id": "1923",
    "template_code_snippet": "class Solution:\n    def longestCommonSubpath(self, n: int, paths: List[List[int]]) -> int:\n        ",
    "template_code_definition": "class Solution:\n    def longestCommonSubpath(self, n: int, paths: List[List[int]]) -> int:\n        ",
    "problem_statement": "There is a country of n cities numbered from 0 to n - 1. In this country, there is a road connecting every pair of cities.\nThere are m friends numbered from 0 to m - 1 who are traveling through the country. Each one of them will take a path consisting of some cities. Each path is represented by an integer array that contains the visited cities in order. The path may contain a city more than once, but the same city will not be listed consecutively.\nGiven an integer n and a 2D integer array paths where paths[i] is an integer array representing the path of the i^th friend, return the length of the longest common subpath that is shared by every friend's path, or 0 if there is no common subpath at all.\nA subpath of a path is a contiguous sequence of cities within that path.\n \nExample 1:\n\nInput: n = 5, paths = [[0,1,2,3,4],\n                       [2,3,4],\n                       [4,0,1,2,3]]\nOutput: 2\nExplanation: The longest common subpath is [2,3].\n\nExample 2:\n\nInput: n = 3, paths = [[0],[1],[2]]\nOutput: 0\nExplanation: There is no common subpath shared by the three paths.\n\nExample 3:\n\nInput: n = 5, paths = [[0,1,2,3,4],\n                       [4,3,2,1,0]]\nOutput: 1\nExplanation: The possible longest common subpaths are [0], [1], [2], [3], and [4]. All have a length of 1.\n \nConstraints:\n\n1 <= n <= 10^5\nm == paths.length\n2 <= m <= 10^5\nsum(paths[i].length) <= 10^5\n0 <= paths[i][j] < n\nThe same city is not listed multiple times consecutively in paths[i].\n\n",
    "difficulty": "Hard",
    "premium": false,
    "enable_run_code": true,
    "enable_test_mode": false,
    "judge_type": "large",
    "judger_available": true,
    "sample_test_case": "5\n[[0,1,2,3,4],[2,3,4],[4,0,1,2,3]]"
}