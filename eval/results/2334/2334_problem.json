{
    "name": "Subarray With Elements Greater Than Varying Threshold",
    "id": "2419",
    "frontend_id": "2334",
    "template_code_snippet": "class Solution:\n    def validSubarraySize(self, nums: List[int], threshold: int) -> int:\n        ",
    "template_code_definition": "class Solution:\n    def validSubarraySize(self, nums: List[int], threshold: int) -> int:\n        ",
    "problem_statement": "You are given an integer array nums and an integer threshold.\nFind any subarray of nums of length k such that every element in the subarray is greater than threshold / k.\nReturn the size of any such subarray. If there is no such subarray, return -1.\nA subarray is a contiguous non-empty sequence of elements within an array.\n \nExample 1:\n\nInput: nums = [1,3,4,3,1], threshold = 6\nOutput: 3\nExplanation: The subarray [3,4,3] has a size of 3, and every element is greater than 6 / 3 = 2.\nNote that this is the only valid subarray.\n\nExample 2:\n\nInput: nums = [6,5,6,5,8], threshold = 7\nOutput: 1\nExplanation: The subarray [8] has a size of 1, and 8 > 7 / 1 = 7. So 1 is returned.\nNote that the subarray [6,5] has a size of 2, and every element is greater than 7 / 2 = 3.5. \nSimilarly, the subarrays [6,5,6], [6,5,6,5], [6,5,6,5,8] also satisfy the given conditions.\nTherefore, 2, 3, 4, or 5 may also be returned.\n \nConstraints:\n\n1 <= nums.length <= 10^5\n1 <= nums[i], threshold <= 10^9\n\n",
    "difficulty": "Hard",
    "premium": false,
    "enable_run_code": true,
    "enable_test_mode": false,
    "judge_type": "large",
    "judger_available": true,
    "sample_test_case": "[1,3,4,3,1]\n6"
}