{
    "name": "Longest Valid Parentheses",
    "id": "32",
    "frontend_id": "32",
    "template_code_snippet": "class Solution:\n    def longestValidParentheses(self, s: str) -> int:\n        ",
    "template_code_definition": "class Solution:\n    def longestValidParentheses(self, s: str) -> int:\n        ",
    "problem_statement": "Given a string containing just the characters '(' and ')', return the length of the longest valid (well-formed) parentheses substring.\n\u00a0\nExample 1:\n\nInput: s = \"(()\"\nOutput: 2\nExplanation: The longest valid parentheses substring is \"()\".\n\nExample 2:\n\nInput: s = \")()())\"\nOutput: 4\nExplanation: The longest valid parentheses substring is \"()()\".\n\nExample 3:\n\nInput: s = \"\"\nOutput: 0\n\n\u00a0\nConstraints:\n\n0 <= s.length <= 3 * 10^4\ns[i] is '(', or ')'.\n\n",
    "difficulty": "Hard",
    "premium": false,
    "enable_run_code": true,
    "enable_test_mode": false,
    "judge_type": "large",
    "judger_available": true,
    "sample_test_case": "\"(()\""
}