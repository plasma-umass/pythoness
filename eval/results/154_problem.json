{
    "name": "Find Minimum in Rotated Sorted Array II",
    "id": "154",
    "frontend_id": "154",
    "template_code_snippet": "class Solution:\n    def findMin(self, nums: List[int]) -> int:\n        ",
    "template_code_definition": "class Solution:\n    def findMin(self, nums: List[int]) -> int:\n        ",
    "problem_statement": "Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,4,4,5,6,7] might become:\n\n[4,5,6,7,0,1,4] if it was rotated 4 times.\n[0,1,4,4,5,6,7] if it was rotated 7 times.\n\nNotice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].\nGiven the sorted rotated array nums that may contain duplicates, return the minimum element of this array.\nYou must decrease the overall operation steps as much as possible.\n\u00a0\nExample 1:\nInput: nums = [1,3,5]\nOutput: 1\nExample 2:\nInput: nums = [2,2,2,0,1]\nOutput: 0\n\n\u00a0\nConstraints:\n\nn == nums.length\n1 <= n <= 5000\n-5000 <= nums[i] <= 5000\nnums is sorted and rotated between 1 and n times.\n\n\u00a0\nFollow up: This problem is similar to\u00a0Find Minimum in Rotated Sorted Array, but\u00a0nums may contain duplicates. Would this affect the runtime complexity? How and why?\n\u00a0\n",
    "difficulty": "Hard",
    "premium": false,
    "enable_run_code": true,
    "enable_test_mode": false,
    "judge_type": "large",
    "judger_available": true,
    "sample_test_case": "[1,3,5]"
}