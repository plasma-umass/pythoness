{
    "name": "Minimum Swaps To Make Sequences Increasing",
    "id": "819",
    "frontend_id": "801",
    "template_code_snippet": "class Solution:\n    def minSwap(self, nums1: List[int], nums2: List[int]) -> int:\n        ",
    "template_code_definition": "class Solution:\n    def minSwap(self, nums1: List[int], nums2: List[int]) -> int:\n        ",
    "problem_statement": "You are given two integer arrays of the same length nums1 and nums2. In one operation, you are allowed to swap nums1[i] with nums2[i].\n\nFor example, if nums1 = [1,2,3,8], and nums2 = [5,6,7,4], you can swap the element at i = 3 to obtain nums1 = [1,2,3,4] and nums2 = [5,6,7,8].\n\nReturn the minimum number of needed operations to make nums1 and nums2 strictly increasing. The test cases are generated so that the given input always makes it possible.\nAn array arr is strictly increasing if and only if arr[0] < arr[1] < arr[2] < ... < arr[arr.length - 1].\n \nExample 1:\n\nInput: nums1 = [1,3,5,4], nums2 = [1,2,3,7]\nOutput: 1\nExplanation: \nSwap nums1[3] and nums2[3]. Then the sequences are:\nnums1 = [1, 3, 5, 7] and nums2 = [1, 2, 3, 4]\nwhich are both strictly increasing.\n\nExample 2:\n\nInput: nums1 = [0,3,5,8,9], nums2 = [2,1,4,6,9]\nOutput: 1\n\n \nConstraints:\n\n2 <= nums1.length <= 10^5\nnums2.length == nums1.length\n0 <= nums1[i], nums2[i] <= 2 * 10^5\n\n",
    "difficulty": "Hard",
    "premium": false,
    "sample_test_case": "[1,3,5,4]\n[1,2,3,7]"
}