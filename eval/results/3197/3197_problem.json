{
    "name": "Find the Minimum Area to Cover All Ones II",
    "id": "3459",
    "frontend_id": "3197",
    "template_code_snippet": "class Solution:\n    def minimumSum(self, grid: List[List[int]]) -> int:\n        ",
    "template_code_definition": "class Solution:\n    def minimumSum(self, grid: List[List[int]]) -> int:\n        ",
    "problem_statement": "You are given a 2D binary array grid. You need to find 3 non-overlapping rectangles having non-zero areas with horizontal and vertical sides such that all the 1's in grid lie inside these rectangles.\nReturn the minimum possible sum of the area of these rectangles.\nNote that the rectangles are allowed to touch.\n \nExample 1:\n\nInput: grid = [[1,0,1],[1,1,1]]\nOutput: 5\nExplanation:\n\n\nThe 1's at (0, 0) and (1, 0) are covered by a rectangle of area 2.\nThe 1's at (0, 2) and (1, 2) are covered by a rectangle of area 2.\nThe 1 at (1, 1) is covered by a rectangle of area 1.\n\n\nExample 2:\n\nInput: grid = [[1,0,1,0],[0,1,0,1]]\nOutput: 5\nExplanation:\n\n\nThe 1's at (0, 0) and (0, 2) are covered by a rectangle of area 3.\nThe 1 at (1, 1) is covered by a rectangle of area 1.\nThe 1 at (1, 3) is covered by a rectangle of area 1.\n\n\n \nConstraints:\n\n1 <= grid.length, grid[i].length <= 30\ngrid[i][j] is either 0 or 1.\nThe input is generated such that there are at least three 1's in grid.\n\n",
    "difficulty": "Hard",
    "premium": false,
    "enable_run_code": true,
    "enable_test_mode": false,
    "judge_type": "large",
    "judger_available": true,
    "sample_test_case": "[[1,0,1],[1,1,1]]"
}