{
    "name": "Distinct Subsequences",
    "id": "115",
    "frontend_id": "115",
    "template_code_snippet": "class Solution:\n    def numDistinct(self, s: str, t: str) -> int:\n        ",
    "template_code_definition": "class Solution:\n    def numDistinct(self, s: str, t: str) -> int:\n        ",
    "problem_statement": "Given two strings s and t, return the number of distinct subsequences of s which equals t.\nThe test cases are generated so that the answer fits on a 32-bit signed integer.\n\u00a0\nExample 1:\n\nInput: s = \"rabbbit\", t = \"rabbit\"\nOutput: 3\nExplanation:\nAs shown below, there are 3 ways you can generate \"rabbit\" from s.\nrabbbit\nrabbbit\nrabbbit\n\nExample 2:\n\nInput: s = \"babgbag\", t = \"bag\"\nOutput: 5\nExplanation:\nAs shown below, there are 5 ways you can generate \"bag\" from s.\nbabgbag\nbabgbag\nbabgbag\nbabgbag\nbabgbag\n\u00a0\nConstraints:\n\n1 <= s.length, t.length <= 1000\ns and t consist of English letters.\n\n",
    "difficulty": "Hard",
    "premium": false,
    "enable_run_code": true,
    "enable_test_mode": false,
    "judge_type": "large",
    "judger_available": true,
    "sample_test_case": "\"rabbbit\"\n\"rabbit\""
}