{
    "name": "Palindrome Partitioning II",
    "id": "132",
    "frontend_id": "132",
    "template_code_snippet": "class Solution:\n    def minCut(self, s: str) -> int:\n        ",
    "template_code_definition": "class Solution:\n    def minCut(self, s: str) -> int:\n        ",
    "problem_statement": "Given a string s, partition s such that every substring of the partition is a palindrome.\nReturn the minimum cuts needed for a palindrome partitioning of s.\n\u00a0\nExample 1:\n\nInput: s = \"aab\"\nOutput: 1\nExplanation: The palindrome partitioning [\"aa\",\"b\"] could be produced using 1 cut.\n\nExample 2:\n\nInput: s = \"a\"\nOutput: 0\n\nExample 3:\n\nInput: s = \"ab\"\nOutput: 1\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 2000\ns consists of lowercase English letters only.\n\n",
    "difficulty": "Hard",
    "premium": false,
    "enable_run_code": true,
    "enable_test_mode": false,
    "judge_type": "large",
    "judger_available": true,
    "sample_test_case": "\"aab\""
}