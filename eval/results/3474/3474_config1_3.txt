class Solution:
    
    def generateString(self, str1: str, str2: str) -> str:
        
        n = len(str1)
        m = len(str2)
        # A helper function that verifies if the word is valid by conditions
    
        def is_valid(word):
            for i in range(n):
                segment = word[i:i + m]
                if str1[i] == 'T':
                    if segment != str2:
                        return False
                elif str1[i] == 'F':
                    if segment == str2:
                        return False
            return True
        # We attempt to build the lexically smallest word
        word = ['a'] * (n + m - 1)
        for i in range(n):
            if str1[i] == 'T':
                word[i:i + m] = str2
        for i in range(n):
            if str1[i] == 'F':
                if word[i:i + m] == list(str2):
                    # Attempt to change the first character of the duplicate to make it non-equal
                    for j in range(m):
                        if word[i + j] != 'z':
                            word[i + j] = chr(ord(word[i + j]) + 1)
                            break
        final_word = ''.join(word)
        return final_word if is_valid(final_word) else ''