import pythoness
from typing import List, Optional

def generateString(str1: str, str2: str) -> str:
    """
    You are given two strings, str1 and str2, of lengths n and m, respectively.
    A string word of length n + m - 1 is defined to be generated by str1 and str2 if it satisfies the following conditions for each index 0 <= i <= n - 1:

    If str1[i] == 'T', the substring of word with size m starting at index i is equal to str2, i.e., word[i..(i + m - 1)] == str2.
    If str1[i] == 'F', the substring of word with size m starting at index i is not equal to str2, i.e., word[i..(i + m - 1)] != str2.

    Return the lexicographically smallest possible string that can be generated by str1 and str2. If no string can be generated, return an empty string "".

    Constraints:

    1 <= n == str1.length <= 10^4
    1 <= m == str2.length <= 500
    str1 consists only of 'T' or 'F'.
    str2 consists only of lowercase English characters.
    """
    # Initialize the word to be of the correct size
    (n, m) = (len(str1), len(str2))
    word = ['a'] * (n + m - 1)
    for i in range(n):
        if str1[i] == 'T':
            if word[i:i + m] != ['a'] * m and ''.join(word[i:i + m]) != str2:
                return ''  # Return empty string if there's a conflict
            word[i:i + m] = str2
        else:
            # Fill in 'F' condition by avoiding str2
            for j in range(m):
                if word[i + j] == 'a':
                    # Select the smallest character different from str2[j]
                    for c in 'abcdefghijklmnopqrstuvwxyz':
                        if c != str2[j]:
                            word[i + j] = c
                            break
                elif word[i + j] == str2[j]:
                    return ''  # If it matches str2 for 'F', it's invalid
    return ''.join(word)
generateString(str1='TFTF', str2='ab')