{
    "name": "Wildcard Matching",
    "id": "44",
    "frontend_id": "44",
    "template_code_snippet": "class Solution:\n    def isMatch(self, s: str, p: str) -> bool:\n        ",
    "template_code_definition": "class Solution:\n    def isMatch(self, s: str, p: str) -> bool:\n        ",
    "problem_statement": "Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*' where:\n\n'?' Matches any single character.\n'*' Matches any sequence of characters (including the empty sequence).\n\nThe matching should cover the entire input string (not partial).\n\u00a0\nExample 1:\n\nInput: s = \"aa\", p = \"a\"\nOutput: false\nExplanation: \"a\" does not match the entire string \"aa\".\n\nExample 2:\n\nInput: s = \"aa\", p = \"*\"\nOutput: true\nExplanation:\u00a0'*' matches any sequence.\n\nExample 3:\n\nInput: s = \"cb\", p = \"?a\"\nOutput: false\nExplanation:\u00a0'?' matches 'c', but the second letter is 'a', which does not match 'b'.\n\n\u00a0\nConstraints:\n\n0 <= s.length, p.length <= 2000\ns contains only lowercase English letters.\np contains only lowercase English letters, '?' or '*'.\n\n",
    "difficulty": "Hard",
    "premium": false,
    "enable_run_code": true,
    "enable_test_mode": false,
    "judge_type": "large",
    "judger_available": true,
    "sample_test_case": "\"aa\"\n\"a\""
}